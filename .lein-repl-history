(defn do-a-thing [x]
(let [summa (+ x x)]
(Math.pow summa summa)))
(defn do-a-thing [x]
  (let [summa (+ x x)]
    (Math/pow summa summa)))
(do-a-thing 2)
(defn spiff [v]
  (+ (get v 0) (get v 2)))
(spiff [1 2 3 4])
(defn cutify [v]
  (conj v "<3"))
(cutify [1 2 3 4])
(defn spiff-destructuring [v]
  (let [first second third] [0 1 2])
  (+ first third))
(defn spiff-destructuring [v]
  (let [[f s t ] [0 1 2]]
  (+ f t)
)
(spiff-destructuring [1 2 3 4])
(defn spiff-destructuring [v]
  (let [[f s t ] v]
  (+ f t)))
(spiff-destructuring [1 2 3 4])
exit
